<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

// <copyright file="DelayActionTemplate.cs" author="Dmitry Kravchenin" email="d.kravchenin@zaaml.com">
//   Copyright (c) Zaaml. All rights reserved.
// </copyright>

// *************************************************************
//
// AutoGenerated
//
// *************************************************************

// ReSharper disable All

using System;

namespace Zaaml.PresentationCore
{
<#
	var typeArgCount = 16;
#>
<#
  for (var i = 1; i <= typeArgCount; i++)
	{
			var typeParam = string.Join(", ", Enumerable.Range(0, i).Select(j => $"TArg{j + 1}"));
			var param = string.Join(", ", Enumerable.Range(0, i).Select(j => $"TArg{j + 1} arg{j + 1}"));
			var arg = string.Join(", ", Enumerable.Range(0, i).Select(j => $"arg{j + 1}"));
			var invokeArg = string.Join(", ", Enumerable.Range(0, i).Select(j => $"_arg{j + 1}"));
#>
		public sealed class DelayAction<<#= typeParam #>> : DelayActionBase
		{
<#
		for (var j = 1; j <= i; j++)
		{
#>
			private TArg<#= j #> _arg<#= j #>;
<#
		}
#>

			public DelayAction(Action<<#= typeParam #>> action, TimeSpan delay) : base(delay)
			{
				Action = action;
			}

			public DelayAction(Action<<#= typeParam #>> action)
			{
				Action = action;
			}

			public Action<<#= typeParam #>> Action { get; }

			public void Invoke(<#= param #>)
			{
<#
		for (var j = 1; j <= i; j++)
		{
#>
				_arg<#= j #> = arg<#= j #>;
<#
		}
#>

				InvokeCore();
			}

			public void Invoke(<#= param #>, TimeSpan delay)
			{
<#
		for (var j = 1; j <= i; j++)
		{
#>
				_arg<#= j #> = arg<#= j #>;
<#
		}
#>

				InvokeCore(delay);
			}

			private void ClearArgs()
			{
<#
		for (var j = 1; j <= i; j++)
		{
#>
				_arg<#= j #> = default;
<#
		}
#>			
			}

			protected override void OnInvoke()
			{
				Action(<#= invokeArg #>);
			}

			protected override void OnRevoke()
			{
			}

			protected override void Reset()
			{
				ClearArgs();
			}
		}
<#
	}
#>

	partial class DelayAction
	{
<#
  for (var i = 1; i <= typeArgCount; i++)
	{
			var typeParam = string.Join(", ", Enumerable.Range(0, i).Select(j => $"TArg{j + 1}"));
			var param = string.Join(", ", Enumerable.Range(0, i).Select(j => $"TArg{j + 1} arg{j + 1}"));
			var arg = string.Join(", ", Enumerable.Range(0, i).Select(j => $"arg{j + 1}"));
#>
			public static Action<<#= typeParam #>> Wrap<<#= typeParam #>>(Action<<#= typeParam #>> action, TimeSpan delay)
			{
				if (delay.Equals(TimeSpan.Zero))
					return action;

				var delayAction = new DelayAction<<#= typeParam #>>(action, delay);

				return (<#= arg #>) => delayAction.Invoke(<#= arg #>);
			}

			public static DelayAction<<#= typeParam #>> StaticInvoke<<#= typeParam #>>(Action<<#= typeParam #>> action, <#= param #>, TimeSpan delay)
			{
				if (delay.Equals(TimeSpan.Zero))
				{
					action(<#= arg #>);

					return null;
				}

				var delayAction = new DelayAction<<#= typeParam #>>(action, delay);

				delayAction.Invoke(<#= arg #>);

				return delayAction;
			}		
<#
	}
#>
	}

	public static partial class DelayActionExtensions
	{
<#
  for (var i = 1; i <= typeArgCount; i++)
	{
			var typeParam = string.Join(", ", Enumerable.Range(0, i).Select(j => $"TArg{j + 1}"));
			var param = string.Join(", ", Enumerable.Range(0, i).Select(j => $"TArg{j + 1} arg{j + 1}"));
			var arg = string.Join(", ", Enumerable.Range(0, i).Select(j => $"arg{j + 1}"));
#>
		public static DelayAction<<#= typeParam #>> AsDelayAction<<#= typeParam #>>(this Action<<#= typeParam #>> action)
		{
			return new DelayAction<<#= typeParam #>>(action);
		}

		public static DelayAction<<#= typeParam #>> AsDelayAction<<#= typeParam #>>(this Action<<#= typeParam #>> action, TimeSpan delay)
		{
			return new DelayAction<<#= typeParam #>>(action, delay);
		}

		public static DelayAction<<#= typeParam #>> DelayInvoke<<#= typeParam #>>(this Action<<#= typeParam #>> action, <#= param #>, TimeSpan delay)
		{
			return DelayAction.StaticInvoke<<#= typeParam #>>(action, <#= arg #>, delay);
		}

		public static DelayAction<<#= typeParam #>> RevokeExchange<<#= typeParam #>>(this DelayAction<<#= typeParam #>> delayAction, DelayAction<<#= typeParam #>> newDelayAction = null)
		{
			delayAction?.Revoke();

			return newDelayAction;
		}
<#
	}
#>
	}
}