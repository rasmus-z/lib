
// <copyright file="DelayActionTemplate.cs" author="Dmitry Kravchenin" email="d.kravchenin@zaaml.com">
//   Copyright (c) Zaaml. All rights reserved.
// </copyright>

// *************************************************************
//
// AutoGenerated
//
// *************************************************************

// ReSharper disable All

using System;

namespace Zaaml.PresentationCore
{
		public sealed class DelayAction<TArg1> : DelayActionBase
		{
			private TArg1 _arg1;

			public DelayAction(Action<TArg1> action, TimeSpan delay) : base(delay)
			{
				Action = action;
			}

			public DelayAction(Action<TArg1> action)
			{
				Action = action;
			}

			public Action<TArg1> Action { get; }

			public void Invoke(TArg1 arg1)
			{
				_arg1 = arg1;

				InvokeCore();
			}

			public void Invoke(TArg1 arg1, TimeSpan delay)
			{
				_arg1 = arg1;

				InvokeCore(delay);
			}

			private void ClearArgs()
			{
				_arg1 = default;
			
			}

			protected override void OnInvoke()
			{
				Action(_arg1);
			}

			protected override void OnRevoke()
			{
			}

			protected override void Reset()
			{
				ClearArgs();
			}
		}
		public sealed class DelayAction<TArg1, TArg2> : DelayActionBase
		{
			private TArg1 _arg1;
			private TArg2 _arg2;

			public DelayAction(Action<TArg1, TArg2> action, TimeSpan delay) : base(delay)
			{
				Action = action;
			}

			public DelayAction(Action<TArg1, TArg2> action)
			{
				Action = action;
			}

			public Action<TArg1, TArg2> Action { get; }

			public void Invoke(TArg1 arg1, TArg2 arg2)
			{
				_arg1 = arg1;
				_arg2 = arg2;

				InvokeCore();
			}

			public void Invoke(TArg1 arg1, TArg2 arg2, TimeSpan delay)
			{
				_arg1 = arg1;
				_arg2 = arg2;

				InvokeCore(delay);
			}

			private void ClearArgs()
			{
				_arg1 = default;
				_arg2 = default;
			
			}

			protected override void OnInvoke()
			{
				Action(_arg1, _arg2);
			}

			protected override void OnRevoke()
			{
			}

			protected override void Reset()
			{
				ClearArgs();
			}
		}
		public sealed class DelayAction<TArg1, TArg2, TArg3> : DelayActionBase
		{
			private TArg1 _arg1;
			private TArg2 _arg2;
			private TArg3 _arg3;

			public DelayAction(Action<TArg1, TArg2, TArg3> action, TimeSpan delay) : base(delay)
			{
				Action = action;
			}

			public DelayAction(Action<TArg1, TArg2, TArg3> action)
			{
				Action = action;
			}

			public Action<TArg1, TArg2, TArg3> Action { get; }

			public void Invoke(TArg1 arg1, TArg2 arg2, TArg3 arg3)
			{
				_arg1 = arg1;
				_arg2 = arg2;
				_arg3 = arg3;

				InvokeCore();
			}

			public void Invoke(TArg1 arg1, TArg2 arg2, TArg3 arg3, TimeSpan delay)
			{
				_arg1 = arg1;
				_arg2 = arg2;
				_arg3 = arg3;

				InvokeCore(delay);
			}

			private void ClearArgs()
			{
				_arg1 = default;
				_arg2 = default;
				_arg3 = default;
			
			}

			protected override void OnInvoke()
			{
				Action(_arg1, _arg2, _arg3);
			}

			protected override void OnRevoke()
			{
			}

			protected override void Reset()
			{
				ClearArgs();
			}
		}
		public sealed class DelayAction<TArg1, TArg2, TArg3, TArg4> : DelayActionBase
		{
			private TArg1 _arg1;
			private TArg2 _arg2;
			private TArg3 _arg3;
			private TArg4 _arg4;

			public DelayAction(Action<TArg1, TArg2, TArg3, TArg4> action, TimeSpan delay) : base(delay)
			{
				Action = action;
			}

			public DelayAction(Action<TArg1, TArg2, TArg3, TArg4> action)
			{
				Action = action;
			}

			public Action<TArg1, TArg2, TArg3, TArg4> Action { get; }

			public void Invoke(TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4)
			{
				_arg1 = arg1;
				_arg2 = arg2;
				_arg3 = arg3;
				_arg4 = arg4;

				InvokeCore();
			}

			public void Invoke(TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TimeSpan delay)
			{
				_arg1 = arg1;
				_arg2 = arg2;
				_arg3 = arg3;
				_arg4 = arg4;

				InvokeCore(delay);
			}

			private void ClearArgs()
			{
				_arg1 = default;
				_arg2 = default;
				_arg3 = default;
				_arg4 = default;
			
			}

			protected override void OnInvoke()
			{
				Action(_arg1, _arg2, _arg3, _arg4);
			}

			protected override void OnRevoke()
			{
			}

			protected override void Reset()
			{
				ClearArgs();
			}
		}
		public sealed class DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5> : DelayActionBase
		{
			private TArg1 _arg1;
			private TArg2 _arg2;
			private TArg3 _arg3;
			private TArg4 _arg4;
			private TArg5 _arg5;

			public DelayAction(Action<TArg1, TArg2, TArg3, TArg4, TArg5> action, TimeSpan delay) : base(delay)
			{
				Action = action;
			}

			public DelayAction(Action<TArg1, TArg2, TArg3, TArg4, TArg5> action)
			{
				Action = action;
			}

			public Action<TArg1, TArg2, TArg3, TArg4, TArg5> Action { get; }

			public void Invoke(TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5)
			{
				_arg1 = arg1;
				_arg2 = arg2;
				_arg3 = arg3;
				_arg4 = arg4;
				_arg5 = arg5;

				InvokeCore();
			}

			public void Invoke(TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TimeSpan delay)
			{
				_arg1 = arg1;
				_arg2 = arg2;
				_arg3 = arg3;
				_arg4 = arg4;
				_arg5 = arg5;

				InvokeCore(delay);
			}

			private void ClearArgs()
			{
				_arg1 = default;
				_arg2 = default;
				_arg3 = default;
				_arg4 = default;
				_arg5 = default;
			
			}

			protected override void OnInvoke()
			{
				Action(_arg1, _arg2, _arg3, _arg4, _arg5);
			}

			protected override void OnRevoke()
			{
			}

			protected override void Reset()
			{
				ClearArgs();
			}
		}
		public sealed class DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6> : DelayActionBase
		{
			private TArg1 _arg1;
			private TArg2 _arg2;
			private TArg3 _arg3;
			private TArg4 _arg4;
			private TArg5 _arg5;
			private TArg6 _arg6;

			public DelayAction(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6> action, TimeSpan delay) : base(delay)
			{
				Action = action;
			}

			public DelayAction(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6> action)
			{
				Action = action;
			}

			public Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6> Action { get; }

			public void Invoke(TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6)
			{
				_arg1 = arg1;
				_arg2 = arg2;
				_arg3 = arg3;
				_arg4 = arg4;
				_arg5 = arg5;
				_arg6 = arg6;

				InvokeCore();
			}

			public void Invoke(TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TimeSpan delay)
			{
				_arg1 = arg1;
				_arg2 = arg2;
				_arg3 = arg3;
				_arg4 = arg4;
				_arg5 = arg5;
				_arg6 = arg6;

				InvokeCore(delay);
			}

			private void ClearArgs()
			{
				_arg1 = default;
				_arg2 = default;
				_arg3 = default;
				_arg4 = default;
				_arg5 = default;
				_arg6 = default;
			
			}

			protected override void OnInvoke()
			{
				Action(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6);
			}

			protected override void OnRevoke()
			{
			}

			protected override void Reset()
			{
				ClearArgs();
			}
		}
		public sealed class DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7> : DelayActionBase
		{
			private TArg1 _arg1;
			private TArg2 _arg2;
			private TArg3 _arg3;
			private TArg4 _arg4;
			private TArg5 _arg5;
			private TArg6 _arg6;
			private TArg7 _arg7;

			public DelayAction(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7> action, TimeSpan delay) : base(delay)
			{
				Action = action;
			}

			public DelayAction(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7> action)
			{
				Action = action;
			}

			public Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7> Action { get; }

			public void Invoke(TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7)
			{
				_arg1 = arg1;
				_arg2 = arg2;
				_arg3 = arg3;
				_arg4 = arg4;
				_arg5 = arg5;
				_arg6 = arg6;
				_arg7 = arg7;

				InvokeCore();
			}

			public void Invoke(TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TimeSpan delay)
			{
				_arg1 = arg1;
				_arg2 = arg2;
				_arg3 = arg3;
				_arg4 = arg4;
				_arg5 = arg5;
				_arg6 = arg6;
				_arg7 = arg7;

				InvokeCore(delay);
			}

			private void ClearArgs()
			{
				_arg1 = default;
				_arg2 = default;
				_arg3 = default;
				_arg4 = default;
				_arg5 = default;
				_arg6 = default;
				_arg7 = default;
			
			}

			protected override void OnInvoke()
			{
				Action(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7);
			}

			protected override void OnRevoke()
			{
			}

			protected override void Reset()
			{
				ClearArgs();
			}
		}
		public sealed class DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8> : DelayActionBase
		{
			private TArg1 _arg1;
			private TArg2 _arg2;
			private TArg3 _arg3;
			private TArg4 _arg4;
			private TArg5 _arg5;
			private TArg6 _arg6;
			private TArg7 _arg7;
			private TArg8 _arg8;

			public DelayAction(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8> action, TimeSpan delay) : base(delay)
			{
				Action = action;
			}

			public DelayAction(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8> action)
			{
				Action = action;
			}

			public Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8> Action { get; }

			public void Invoke(TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8)
			{
				_arg1 = arg1;
				_arg2 = arg2;
				_arg3 = arg3;
				_arg4 = arg4;
				_arg5 = arg5;
				_arg6 = arg6;
				_arg7 = arg7;
				_arg8 = arg8;

				InvokeCore();
			}

			public void Invoke(TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TimeSpan delay)
			{
				_arg1 = arg1;
				_arg2 = arg2;
				_arg3 = arg3;
				_arg4 = arg4;
				_arg5 = arg5;
				_arg6 = arg6;
				_arg7 = arg7;
				_arg8 = arg8;

				InvokeCore(delay);
			}

			private void ClearArgs()
			{
				_arg1 = default;
				_arg2 = default;
				_arg3 = default;
				_arg4 = default;
				_arg5 = default;
				_arg6 = default;
				_arg7 = default;
				_arg8 = default;
			
			}

			protected override void OnInvoke()
			{
				Action(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7, _arg8);
			}

			protected override void OnRevoke()
			{
			}

			protected override void Reset()
			{
				ClearArgs();
			}
		}
		public sealed class DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9> : DelayActionBase
		{
			private TArg1 _arg1;
			private TArg2 _arg2;
			private TArg3 _arg3;
			private TArg4 _arg4;
			private TArg5 _arg5;
			private TArg6 _arg6;
			private TArg7 _arg7;
			private TArg8 _arg8;
			private TArg9 _arg9;

			public DelayAction(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9> action, TimeSpan delay) : base(delay)
			{
				Action = action;
			}

			public DelayAction(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9> action)
			{
				Action = action;
			}

			public Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9> Action { get; }

			public void Invoke(TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9)
			{
				_arg1 = arg1;
				_arg2 = arg2;
				_arg3 = arg3;
				_arg4 = arg4;
				_arg5 = arg5;
				_arg6 = arg6;
				_arg7 = arg7;
				_arg8 = arg8;
				_arg9 = arg9;

				InvokeCore();
			}

			public void Invoke(TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9, TimeSpan delay)
			{
				_arg1 = arg1;
				_arg2 = arg2;
				_arg3 = arg3;
				_arg4 = arg4;
				_arg5 = arg5;
				_arg6 = arg6;
				_arg7 = arg7;
				_arg8 = arg8;
				_arg9 = arg9;

				InvokeCore(delay);
			}

			private void ClearArgs()
			{
				_arg1 = default;
				_arg2 = default;
				_arg3 = default;
				_arg4 = default;
				_arg5 = default;
				_arg6 = default;
				_arg7 = default;
				_arg8 = default;
				_arg9 = default;
			
			}

			protected override void OnInvoke()
			{
				Action(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7, _arg8, _arg9);
			}

			protected override void OnRevoke()
			{
			}

			protected override void Reset()
			{
				ClearArgs();
			}
		}
		public sealed class DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10> : DelayActionBase
		{
			private TArg1 _arg1;
			private TArg2 _arg2;
			private TArg3 _arg3;
			private TArg4 _arg4;
			private TArg5 _arg5;
			private TArg6 _arg6;
			private TArg7 _arg7;
			private TArg8 _arg8;
			private TArg9 _arg9;
			private TArg10 _arg10;

			public DelayAction(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10> action, TimeSpan delay) : base(delay)
			{
				Action = action;
			}

			public DelayAction(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10> action)
			{
				Action = action;
			}

			public Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10> Action { get; }

			public void Invoke(TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9, TArg10 arg10)
			{
				_arg1 = arg1;
				_arg2 = arg2;
				_arg3 = arg3;
				_arg4 = arg4;
				_arg5 = arg5;
				_arg6 = arg6;
				_arg7 = arg7;
				_arg8 = arg8;
				_arg9 = arg9;
				_arg10 = arg10;

				InvokeCore();
			}

			public void Invoke(TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9, TArg10 arg10, TimeSpan delay)
			{
				_arg1 = arg1;
				_arg2 = arg2;
				_arg3 = arg3;
				_arg4 = arg4;
				_arg5 = arg5;
				_arg6 = arg6;
				_arg7 = arg7;
				_arg8 = arg8;
				_arg9 = arg9;
				_arg10 = arg10;

				InvokeCore(delay);
			}

			private void ClearArgs()
			{
				_arg1 = default;
				_arg2 = default;
				_arg3 = default;
				_arg4 = default;
				_arg5 = default;
				_arg6 = default;
				_arg7 = default;
				_arg8 = default;
				_arg9 = default;
				_arg10 = default;
			
			}

			protected override void OnInvoke()
			{
				Action(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7, _arg8, _arg9, _arg10);
			}

			protected override void OnRevoke()
			{
			}

			protected override void Reset()
			{
				ClearArgs();
			}
		}
		public sealed class DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11> : DelayActionBase
		{
			private TArg1 _arg1;
			private TArg2 _arg2;
			private TArg3 _arg3;
			private TArg4 _arg4;
			private TArg5 _arg5;
			private TArg6 _arg6;
			private TArg7 _arg7;
			private TArg8 _arg8;
			private TArg9 _arg9;
			private TArg10 _arg10;
			private TArg11 _arg11;

			public DelayAction(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11> action, TimeSpan delay) : base(delay)
			{
				Action = action;
			}

			public DelayAction(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11> action)
			{
				Action = action;
			}

			public Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11> Action { get; }

			public void Invoke(TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9, TArg10 arg10, TArg11 arg11)
			{
				_arg1 = arg1;
				_arg2 = arg2;
				_arg3 = arg3;
				_arg4 = arg4;
				_arg5 = arg5;
				_arg6 = arg6;
				_arg7 = arg7;
				_arg8 = arg8;
				_arg9 = arg9;
				_arg10 = arg10;
				_arg11 = arg11;

				InvokeCore();
			}

			public void Invoke(TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9, TArg10 arg10, TArg11 arg11, TimeSpan delay)
			{
				_arg1 = arg1;
				_arg2 = arg2;
				_arg3 = arg3;
				_arg4 = arg4;
				_arg5 = arg5;
				_arg6 = arg6;
				_arg7 = arg7;
				_arg8 = arg8;
				_arg9 = arg9;
				_arg10 = arg10;
				_arg11 = arg11;

				InvokeCore(delay);
			}

			private void ClearArgs()
			{
				_arg1 = default;
				_arg2 = default;
				_arg3 = default;
				_arg4 = default;
				_arg5 = default;
				_arg6 = default;
				_arg7 = default;
				_arg8 = default;
				_arg9 = default;
				_arg10 = default;
				_arg11 = default;
			
			}

			protected override void OnInvoke()
			{
				Action(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7, _arg8, _arg9, _arg10, _arg11);
			}

			protected override void OnRevoke()
			{
			}

			protected override void Reset()
			{
				ClearArgs();
			}
		}
		public sealed class DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12> : DelayActionBase
		{
			private TArg1 _arg1;
			private TArg2 _arg2;
			private TArg3 _arg3;
			private TArg4 _arg4;
			private TArg5 _arg5;
			private TArg6 _arg6;
			private TArg7 _arg7;
			private TArg8 _arg8;
			private TArg9 _arg9;
			private TArg10 _arg10;
			private TArg11 _arg11;
			private TArg12 _arg12;

			public DelayAction(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12> action, TimeSpan delay) : base(delay)
			{
				Action = action;
			}

			public DelayAction(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12> action)
			{
				Action = action;
			}

			public Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12> Action { get; }

			public void Invoke(TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9, TArg10 arg10, TArg11 arg11, TArg12 arg12)
			{
				_arg1 = arg1;
				_arg2 = arg2;
				_arg3 = arg3;
				_arg4 = arg4;
				_arg5 = arg5;
				_arg6 = arg6;
				_arg7 = arg7;
				_arg8 = arg8;
				_arg9 = arg9;
				_arg10 = arg10;
				_arg11 = arg11;
				_arg12 = arg12;

				InvokeCore();
			}

			public void Invoke(TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9, TArg10 arg10, TArg11 arg11, TArg12 arg12, TimeSpan delay)
			{
				_arg1 = arg1;
				_arg2 = arg2;
				_arg3 = arg3;
				_arg4 = arg4;
				_arg5 = arg5;
				_arg6 = arg6;
				_arg7 = arg7;
				_arg8 = arg8;
				_arg9 = arg9;
				_arg10 = arg10;
				_arg11 = arg11;
				_arg12 = arg12;

				InvokeCore(delay);
			}

			private void ClearArgs()
			{
				_arg1 = default;
				_arg2 = default;
				_arg3 = default;
				_arg4 = default;
				_arg5 = default;
				_arg6 = default;
				_arg7 = default;
				_arg8 = default;
				_arg9 = default;
				_arg10 = default;
				_arg11 = default;
				_arg12 = default;
			
			}

			protected override void OnInvoke()
			{
				Action(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7, _arg8, _arg9, _arg10, _arg11, _arg12);
			}

			protected override void OnRevoke()
			{
			}

			protected override void Reset()
			{
				ClearArgs();
			}
		}
		public sealed class DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13> : DelayActionBase
		{
			private TArg1 _arg1;
			private TArg2 _arg2;
			private TArg3 _arg3;
			private TArg4 _arg4;
			private TArg5 _arg5;
			private TArg6 _arg6;
			private TArg7 _arg7;
			private TArg8 _arg8;
			private TArg9 _arg9;
			private TArg10 _arg10;
			private TArg11 _arg11;
			private TArg12 _arg12;
			private TArg13 _arg13;

			public DelayAction(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13> action, TimeSpan delay) : base(delay)
			{
				Action = action;
			}

			public DelayAction(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13> action)
			{
				Action = action;
			}

			public Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13> Action { get; }

			public void Invoke(TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9, TArg10 arg10, TArg11 arg11, TArg12 arg12, TArg13 arg13)
			{
				_arg1 = arg1;
				_arg2 = arg2;
				_arg3 = arg3;
				_arg4 = arg4;
				_arg5 = arg5;
				_arg6 = arg6;
				_arg7 = arg7;
				_arg8 = arg8;
				_arg9 = arg9;
				_arg10 = arg10;
				_arg11 = arg11;
				_arg12 = arg12;
				_arg13 = arg13;

				InvokeCore();
			}

			public void Invoke(TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9, TArg10 arg10, TArg11 arg11, TArg12 arg12, TArg13 arg13, TimeSpan delay)
			{
				_arg1 = arg1;
				_arg2 = arg2;
				_arg3 = arg3;
				_arg4 = arg4;
				_arg5 = arg5;
				_arg6 = arg6;
				_arg7 = arg7;
				_arg8 = arg8;
				_arg9 = arg9;
				_arg10 = arg10;
				_arg11 = arg11;
				_arg12 = arg12;
				_arg13 = arg13;

				InvokeCore(delay);
			}

			private void ClearArgs()
			{
				_arg1 = default;
				_arg2 = default;
				_arg3 = default;
				_arg4 = default;
				_arg5 = default;
				_arg6 = default;
				_arg7 = default;
				_arg8 = default;
				_arg9 = default;
				_arg10 = default;
				_arg11 = default;
				_arg12 = default;
				_arg13 = default;
			
			}

			protected override void OnInvoke()
			{
				Action(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7, _arg8, _arg9, _arg10, _arg11, _arg12, _arg13);
			}

			protected override void OnRevoke()
			{
			}

			protected override void Reset()
			{
				ClearArgs();
			}
		}
		public sealed class DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14> : DelayActionBase
		{
			private TArg1 _arg1;
			private TArg2 _arg2;
			private TArg3 _arg3;
			private TArg4 _arg4;
			private TArg5 _arg5;
			private TArg6 _arg6;
			private TArg7 _arg7;
			private TArg8 _arg8;
			private TArg9 _arg9;
			private TArg10 _arg10;
			private TArg11 _arg11;
			private TArg12 _arg12;
			private TArg13 _arg13;
			private TArg14 _arg14;

			public DelayAction(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14> action, TimeSpan delay) : base(delay)
			{
				Action = action;
			}

			public DelayAction(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14> action)
			{
				Action = action;
			}

			public Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14> Action { get; }

			public void Invoke(TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9, TArg10 arg10, TArg11 arg11, TArg12 arg12, TArg13 arg13, TArg14 arg14)
			{
				_arg1 = arg1;
				_arg2 = arg2;
				_arg3 = arg3;
				_arg4 = arg4;
				_arg5 = arg5;
				_arg6 = arg6;
				_arg7 = arg7;
				_arg8 = arg8;
				_arg9 = arg9;
				_arg10 = arg10;
				_arg11 = arg11;
				_arg12 = arg12;
				_arg13 = arg13;
				_arg14 = arg14;

				InvokeCore();
			}

			public void Invoke(TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9, TArg10 arg10, TArg11 arg11, TArg12 arg12, TArg13 arg13, TArg14 arg14, TimeSpan delay)
			{
				_arg1 = arg1;
				_arg2 = arg2;
				_arg3 = arg3;
				_arg4 = arg4;
				_arg5 = arg5;
				_arg6 = arg6;
				_arg7 = arg7;
				_arg8 = arg8;
				_arg9 = arg9;
				_arg10 = arg10;
				_arg11 = arg11;
				_arg12 = arg12;
				_arg13 = arg13;
				_arg14 = arg14;

				InvokeCore(delay);
			}

			private void ClearArgs()
			{
				_arg1 = default;
				_arg2 = default;
				_arg3 = default;
				_arg4 = default;
				_arg5 = default;
				_arg6 = default;
				_arg7 = default;
				_arg8 = default;
				_arg9 = default;
				_arg10 = default;
				_arg11 = default;
				_arg12 = default;
				_arg13 = default;
				_arg14 = default;
			
			}

			protected override void OnInvoke()
			{
				Action(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7, _arg8, _arg9, _arg10, _arg11, _arg12, _arg13, _arg14);
			}

			protected override void OnRevoke()
			{
			}

			protected override void Reset()
			{
				ClearArgs();
			}
		}
		public sealed class DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15> : DelayActionBase
		{
			private TArg1 _arg1;
			private TArg2 _arg2;
			private TArg3 _arg3;
			private TArg4 _arg4;
			private TArg5 _arg5;
			private TArg6 _arg6;
			private TArg7 _arg7;
			private TArg8 _arg8;
			private TArg9 _arg9;
			private TArg10 _arg10;
			private TArg11 _arg11;
			private TArg12 _arg12;
			private TArg13 _arg13;
			private TArg14 _arg14;
			private TArg15 _arg15;

			public DelayAction(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15> action, TimeSpan delay) : base(delay)
			{
				Action = action;
			}

			public DelayAction(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15> action)
			{
				Action = action;
			}

			public Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15> Action { get; }

			public void Invoke(TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9, TArg10 arg10, TArg11 arg11, TArg12 arg12, TArg13 arg13, TArg14 arg14, TArg15 arg15)
			{
				_arg1 = arg1;
				_arg2 = arg2;
				_arg3 = arg3;
				_arg4 = arg4;
				_arg5 = arg5;
				_arg6 = arg6;
				_arg7 = arg7;
				_arg8 = arg8;
				_arg9 = arg9;
				_arg10 = arg10;
				_arg11 = arg11;
				_arg12 = arg12;
				_arg13 = arg13;
				_arg14 = arg14;
				_arg15 = arg15;

				InvokeCore();
			}

			public void Invoke(TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9, TArg10 arg10, TArg11 arg11, TArg12 arg12, TArg13 arg13, TArg14 arg14, TArg15 arg15, TimeSpan delay)
			{
				_arg1 = arg1;
				_arg2 = arg2;
				_arg3 = arg3;
				_arg4 = arg4;
				_arg5 = arg5;
				_arg6 = arg6;
				_arg7 = arg7;
				_arg8 = arg8;
				_arg9 = arg9;
				_arg10 = arg10;
				_arg11 = arg11;
				_arg12 = arg12;
				_arg13 = arg13;
				_arg14 = arg14;
				_arg15 = arg15;

				InvokeCore(delay);
			}

			private void ClearArgs()
			{
				_arg1 = default;
				_arg2 = default;
				_arg3 = default;
				_arg4 = default;
				_arg5 = default;
				_arg6 = default;
				_arg7 = default;
				_arg8 = default;
				_arg9 = default;
				_arg10 = default;
				_arg11 = default;
				_arg12 = default;
				_arg13 = default;
				_arg14 = default;
				_arg15 = default;
			
			}

			protected override void OnInvoke()
			{
				Action(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7, _arg8, _arg9, _arg10, _arg11, _arg12, _arg13, _arg14, _arg15);
			}

			protected override void OnRevoke()
			{
			}

			protected override void Reset()
			{
				ClearArgs();
			}
		}
		public sealed class DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16> : DelayActionBase
		{
			private TArg1 _arg1;
			private TArg2 _arg2;
			private TArg3 _arg3;
			private TArg4 _arg4;
			private TArg5 _arg5;
			private TArg6 _arg6;
			private TArg7 _arg7;
			private TArg8 _arg8;
			private TArg9 _arg9;
			private TArg10 _arg10;
			private TArg11 _arg11;
			private TArg12 _arg12;
			private TArg13 _arg13;
			private TArg14 _arg14;
			private TArg15 _arg15;
			private TArg16 _arg16;

			public DelayAction(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16> action, TimeSpan delay) : base(delay)
			{
				Action = action;
			}

			public DelayAction(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16> action)
			{
				Action = action;
			}

			public Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16> Action { get; }

			public void Invoke(TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9, TArg10 arg10, TArg11 arg11, TArg12 arg12, TArg13 arg13, TArg14 arg14, TArg15 arg15, TArg16 arg16)
			{
				_arg1 = arg1;
				_arg2 = arg2;
				_arg3 = arg3;
				_arg4 = arg4;
				_arg5 = arg5;
				_arg6 = arg6;
				_arg7 = arg7;
				_arg8 = arg8;
				_arg9 = arg9;
				_arg10 = arg10;
				_arg11 = arg11;
				_arg12 = arg12;
				_arg13 = arg13;
				_arg14 = arg14;
				_arg15 = arg15;
				_arg16 = arg16;

				InvokeCore();
			}

			public void Invoke(TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9, TArg10 arg10, TArg11 arg11, TArg12 arg12, TArg13 arg13, TArg14 arg14, TArg15 arg15, TArg16 arg16, TimeSpan delay)
			{
				_arg1 = arg1;
				_arg2 = arg2;
				_arg3 = arg3;
				_arg4 = arg4;
				_arg5 = arg5;
				_arg6 = arg6;
				_arg7 = arg7;
				_arg8 = arg8;
				_arg9 = arg9;
				_arg10 = arg10;
				_arg11 = arg11;
				_arg12 = arg12;
				_arg13 = arg13;
				_arg14 = arg14;
				_arg15 = arg15;
				_arg16 = arg16;

				InvokeCore(delay);
			}

			private void ClearArgs()
			{
				_arg1 = default;
				_arg2 = default;
				_arg3 = default;
				_arg4 = default;
				_arg5 = default;
				_arg6 = default;
				_arg7 = default;
				_arg8 = default;
				_arg9 = default;
				_arg10 = default;
				_arg11 = default;
				_arg12 = default;
				_arg13 = default;
				_arg14 = default;
				_arg15 = default;
				_arg16 = default;
			
			}

			protected override void OnInvoke()
			{
				Action(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7, _arg8, _arg9, _arg10, _arg11, _arg12, _arg13, _arg14, _arg15, _arg16);
			}

			protected override void OnRevoke()
			{
			}

			protected override void Reset()
			{
				ClearArgs();
			}
		}

	partial class DelayAction
	{
			public static Action<TArg1> Wrap<TArg1>(Action<TArg1> action, TimeSpan delay)
			{
				if (delay.Equals(TimeSpan.Zero))
					return action;

				var delayAction = new DelayAction<TArg1>(action, delay);

				return (arg1) => delayAction.Invoke(arg1);
			}

			public static DelayAction<TArg1> StaticInvoke<TArg1>(Action<TArg1> action, TArg1 arg1, TimeSpan delay)
			{
				if (delay.Equals(TimeSpan.Zero))
				{
					action(arg1);

					return null;
				}

				var delayAction = new DelayAction<TArg1>(action, delay);

				delayAction.Invoke(arg1);

				return delayAction;
			}		
			public static Action<TArg1, TArg2> Wrap<TArg1, TArg2>(Action<TArg1, TArg2> action, TimeSpan delay)
			{
				if (delay.Equals(TimeSpan.Zero))
					return action;

				var delayAction = new DelayAction<TArg1, TArg2>(action, delay);

				return (arg1, arg2) => delayAction.Invoke(arg1, arg2);
			}

			public static DelayAction<TArg1, TArg2> StaticInvoke<TArg1, TArg2>(Action<TArg1, TArg2> action, TArg1 arg1, TArg2 arg2, TimeSpan delay)
			{
				if (delay.Equals(TimeSpan.Zero))
				{
					action(arg1, arg2);

					return null;
				}

				var delayAction = new DelayAction<TArg1, TArg2>(action, delay);

				delayAction.Invoke(arg1, arg2);

				return delayAction;
			}		
			public static Action<TArg1, TArg2, TArg3> Wrap<TArg1, TArg2, TArg3>(Action<TArg1, TArg2, TArg3> action, TimeSpan delay)
			{
				if (delay.Equals(TimeSpan.Zero))
					return action;

				var delayAction = new DelayAction<TArg1, TArg2, TArg3>(action, delay);

				return (arg1, arg2, arg3) => delayAction.Invoke(arg1, arg2, arg3);
			}

			public static DelayAction<TArg1, TArg2, TArg3> StaticInvoke<TArg1, TArg2, TArg3>(Action<TArg1, TArg2, TArg3> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TimeSpan delay)
			{
				if (delay.Equals(TimeSpan.Zero))
				{
					action(arg1, arg2, arg3);

					return null;
				}

				var delayAction = new DelayAction<TArg1, TArg2, TArg3>(action, delay);

				delayAction.Invoke(arg1, arg2, arg3);

				return delayAction;
			}		
			public static Action<TArg1, TArg2, TArg3, TArg4> Wrap<TArg1, TArg2, TArg3, TArg4>(Action<TArg1, TArg2, TArg3, TArg4> action, TimeSpan delay)
			{
				if (delay.Equals(TimeSpan.Zero))
					return action;

				var delayAction = new DelayAction<TArg1, TArg2, TArg3, TArg4>(action, delay);

				return (arg1, arg2, arg3, arg4) => delayAction.Invoke(arg1, arg2, arg3, arg4);
			}

			public static DelayAction<TArg1, TArg2, TArg3, TArg4> StaticInvoke<TArg1, TArg2, TArg3, TArg4>(Action<TArg1, TArg2, TArg3, TArg4> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TimeSpan delay)
			{
				if (delay.Equals(TimeSpan.Zero))
				{
					action(arg1, arg2, arg3, arg4);

					return null;
				}

				var delayAction = new DelayAction<TArg1, TArg2, TArg3, TArg4>(action, delay);

				delayAction.Invoke(arg1, arg2, arg3, arg4);

				return delayAction;
			}		
			public static Action<TArg1, TArg2, TArg3, TArg4, TArg5> Wrap<TArg1, TArg2, TArg3, TArg4, TArg5>(Action<TArg1, TArg2, TArg3, TArg4, TArg5> action, TimeSpan delay)
			{
				if (delay.Equals(TimeSpan.Zero))
					return action;

				var delayAction = new DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5>(action, delay);

				return (arg1, arg2, arg3, arg4, arg5) => delayAction.Invoke(arg1, arg2, arg3, arg4, arg5);
			}

			public static DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5> StaticInvoke<TArg1, TArg2, TArg3, TArg4, TArg5>(Action<TArg1, TArg2, TArg3, TArg4, TArg5> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TimeSpan delay)
			{
				if (delay.Equals(TimeSpan.Zero))
				{
					action(arg1, arg2, arg3, arg4, arg5);

					return null;
				}

				var delayAction = new DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5>(action, delay);

				delayAction.Invoke(arg1, arg2, arg3, arg4, arg5);

				return delayAction;
			}		
			public static Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6> Wrap<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6>(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6> action, TimeSpan delay)
			{
				if (delay.Equals(TimeSpan.Zero))
					return action;

				var delayAction = new DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6>(action, delay);

				return (arg1, arg2, arg3, arg4, arg5, arg6) => delayAction.Invoke(arg1, arg2, arg3, arg4, arg5, arg6);
			}

			public static DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6> StaticInvoke<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6>(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TimeSpan delay)
			{
				if (delay.Equals(TimeSpan.Zero))
				{
					action(arg1, arg2, arg3, arg4, arg5, arg6);

					return null;
				}

				var delayAction = new DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6>(action, delay);

				delayAction.Invoke(arg1, arg2, arg3, arg4, arg5, arg6);

				return delayAction;
			}		
			public static Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7> Wrap<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7>(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7> action, TimeSpan delay)
			{
				if (delay.Equals(TimeSpan.Zero))
					return action;

				var delayAction = new DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7>(action, delay);

				return (arg1, arg2, arg3, arg4, arg5, arg6, arg7) => delayAction.Invoke(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			}

			public static DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7> StaticInvoke<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7>(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TimeSpan delay)
			{
				if (delay.Equals(TimeSpan.Zero))
				{
					action(arg1, arg2, arg3, arg4, arg5, arg6, arg7);

					return null;
				}

				var delayAction = new DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7>(action, delay);

				delayAction.Invoke(arg1, arg2, arg3, arg4, arg5, arg6, arg7);

				return delayAction;
			}		
			public static Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8> Wrap<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8>(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8> action, TimeSpan delay)
			{
				if (delay.Equals(TimeSpan.Zero))
					return action;

				var delayAction = new DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8>(action, delay);

				return (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8) => delayAction.Invoke(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			}

			public static DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8> StaticInvoke<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8>(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TimeSpan delay)
			{
				if (delay.Equals(TimeSpan.Zero))
				{
					action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);

					return null;
				}

				var delayAction = new DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8>(action, delay);

				delayAction.Invoke(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);

				return delayAction;
			}		
			public static Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9> Wrap<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9>(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9> action, TimeSpan delay)
			{
				if (delay.Equals(TimeSpan.Zero))
					return action;

				var delayAction = new DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9>(action, delay);

				return (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9) => delayAction.Invoke(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
			}

			public static DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9> StaticInvoke<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9>(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9, TimeSpan delay)
			{
				if (delay.Equals(TimeSpan.Zero))
				{
					action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);

					return null;
				}

				var delayAction = new DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9>(action, delay);

				delayAction.Invoke(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);

				return delayAction;
			}		
			public static Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10> Wrap<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10>(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10> action, TimeSpan delay)
			{
				if (delay.Equals(TimeSpan.Zero))
					return action;

				var delayAction = new DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10>(action, delay);

				return (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10) => delayAction.Invoke(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			}

			public static DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10> StaticInvoke<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10>(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9, TArg10 arg10, TimeSpan delay)
			{
				if (delay.Equals(TimeSpan.Zero))
				{
					action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);

					return null;
				}

				var delayAction = new DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10>(action, delay);

				delayAction.Invoke(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);

				return delayAction;
			}		
			public static Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11> Wrap<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11>(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11> action, TimeSpan delay)
			{
				if (delay.Equals(TimeSpan.Zero))
					return action;

				var delayAction = new DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11>(action, delay);

				return (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11) => delayAction.Invoke(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
			}

			public static DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11> StaticInvoke<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11>(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9, TArg10 arg10, TArg11 arg11, TimeSpan delay)
			{
				if (delay.Equals(TimeSpan.Zero))
				{
					action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);

					return null;
				}

				var delayAction = new DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11>(action, delay);

				delayAction.Invoke(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);

				return delayAction;
			}		
			public static Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12> Wrap<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12>(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12> action, TimeSpan delay)
			{
				if (delay.Equals(TimeSpan.Zero))
					return action;

				var delayAction = new DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12>(action, delay);

				return (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12) => delayAction.Invoke(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
			}

			public static DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12> StaticInvoke<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12>(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9, TArg10 arg10, TArg11 arg11, TArg12 arg12, TimeSpan delay)
			{
				if (delay.Equals(TimeSpan.Zero))
				{
					action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);

					return null;
				}

				var delayAction = new DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12>(action, delay);

				delayAction.Invoke(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);

				return delayAction;
			}		
			public static Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13> Wrap<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13>(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13> action, TimeSpan delay)
			{
				if (delay.Equals(TimeSpan.Zero))
					return action;

				var delayAction = new DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13>(action, delay);

				return (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13) => delayAction.Invoke(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
			}

			public static DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13> StaticInvoke<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13>(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9, TArg10 arg10, TArg11 arg11, TArg12 arg12, TArg13 arg13, TimeSpan delay)
			{
				if (delay.Equals(TimeSpan.Zero))
				{
					action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);

					return null;
				}

				var delayAction = new DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13>(action, delay);

				delayAction.Invoke(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);

				return delayAction;
			}		
			public static Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14> Wrap<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14>(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14> action, TimeSpan delay)
			{
				if (delay.Equals(TimeSpan.Zero))
					return action;

				var delayAction = new DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14>(action, delay);

				return (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14) => delayAction.Invoke(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
			}

			public static DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14> StaticInvoke<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14>(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9, TArg10 arg10, TArg11 arg11, TArg12 arg12, TArg13 arg13, TArg14 arg14, TimeSpan delay)
			{
				if (delay.Equals(TimeSpan.Zero))
				{
					action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);

					return null;
				}

				var delayAction = new DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14>(action, delay);

				delayAction.Invoke(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);

				return delayAction;
			}		
			public static Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15> Wrap<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15>(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15> action, TimeSpan delay)
			{
				if (delay.Equals(TimeSpan.Zero))
					return action;

				var delayAction = new DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15>(action, delay);

				return (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15) => delayAction.Invoke(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15);
			}

			public static DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15> StaticInvoke<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15>(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9, TArg10 arg10, TArg11 arg11, TArg12 arg12, TArg13 arg13, TArg14 arg14, TArg15 arg15, TimeSpan delay)
			{
				if (delay.Equals(TimeSpan.Zero))
				{
					action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15);

					return null;
				}

				var delayAction = new DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15>(action, delay);

				delayAction.Invoke(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15);

				return delayAction;
			}		
			public static Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16> Wrap<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16>(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16> action, TimeSpan delay)
			{
				if (delay.Equals(TimeSpan.Zero))
					return action;

				var delayAction = new DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16>(action, delay);

				return (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16) => delayAction.Invoke(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16);
			}

			public static DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16> StaticInvoke<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16>(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9, TArg10 arg10, TArg11 arg11, TArg12 arg12, TArg13 arg13, TArg14 arg14, TArg15 arg15, TArg16 arg16, TimeSpan delay)
			{
				if (delay.Equals(TimeSpan.Zero))
				{
					action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16);

					return null;
				}

				var delayAction = new DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16>(action, delay);

				delayAction.Invoke(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16);

				return delayAction;
			}		
	}

	public static partial class DelayActionExtensions
	{
		public static DelayAction<TArg1> AsDelayAction<TArg1>(this Action<TArg1> action)
		{
			return new DelayAction<TArg1>(action);
		}

		public static DelayAction<TArg1> AsDelayAction<TArg1>(this Action<TArg1> action, TimeSpan delay)
		{
			return new DelayAction<TArg1>(action, delay);
		}

		public static DelayAction<TArg1> DelayInvoke<TArg1>(this Action<TArg1> action, TArg1 arg1, TimeSpan delay)
		{
			return DelayAction.StaticInvoke<TArg1>(action, arg1, delay);
		}

		public static DelayAction<TArg1> RevokeExchange<TArg1>(this DelayAction<TArg1> delayAction, DelayAction<TArg1> newDelayAction = null)
		{
			delayAction?.Revoke();

			return newDelayAction;
		}
		public static DelayAction<TArg1, TArg2> AsDelayAction<TArg1, TArg2>(this Action<TArg1, TArg2> action)
		{
			return new DelayAction<TArg1, TArg2>(action);
		}

		public static DelayAction<TArg1, TArg2> AsDelayAction<TArg1, TArg2>(this Action<TArg1, TArg2> action, TimeSpan delay)
		{
			return new DelayAction<TArg1, TArg2>(action, delay);
		}

		public static DelayAction<TArg1, TArg2> DelayInvoke<TArg1, TArg2>(this Action<TArg1, TArg2> action, TArg1 arg1, TArg2 arg2, TimeSpan delay)
		{
			return DelayAction.StaticInvoke<TArg1, TArg2>(action, arg1, arg2, delay);
		}

		public static DelayAction<TArg1, TArg2> RevokeExchange<TArg1, TArg2>(this DelayAction<TArg1, TArg2> delayAction, DelayAction<TArg1, TArg2> newDelayAction = null)
		{
			delayAction?.Revoke();

			return newDelayAction;
		}
		public static DelayAction<TArg1, TArg2, TArg3> AsDelayAction<TArg1, TArg2, TArg3>(this Action<TArg1, TArg2, TArg3> action)
		{
			return new DelayAction<TArg1, TArg2, TArg3>(action);
		}

		public static DelayAction<TArg1, TArg2, TArg3> AsDelayAction<TArg1, TArg2, TArg3>(this Action<TArg1, TArg2, TArg3> action, TimeSpan delay)
		{
			return new DelayAction<TArg1, TArg2, TArg3>(action, delay);
		}

		public static DelayAction<TArg1, TArg2, TArg3> DelayInvoke<TArg1, TArg2, TArg3>(this Action<TArg1, TArg2, TArg3> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TimeSpan delay)
		{
			return DelayAction.StaticInvoke<TArg1, TArg2, TArg3>(action, arg1, arg2, arg3, delay);
		}

		public static DelayAction<TArg1, TArg2, TArg3> RevokeExchange<TArg1, TArg2, TArg3>(this DelayAction<TArg1, TArg2, TArg3> delayAction, DelayAction<TArg1, TArg2, TArg3> newDelayAction = null)
		{
			delayAction?.Revoke();

			return newDelayAction;
		}
		public static DelayAction<TArg1, TArg2, TArg3, TArg4> AsDelayAction<TArg1, TArg2, TArg3, TArg4>(this Action<TArg1, TArg2, TArg3, TArg4> action)
		{
			return new DelayAction<TArg1, TArg2, TArg3, TArg4>(action);
		}

		public static DelayAction<TArg1, TArg2, TArg3, TArg4> AsDelayAction<TArg1, TArg2, TArg3, TArg4>(this Action<TArg1, TArg2, TArg3, TArg4> action, TimeSpan delay)
		{
			return new DelayAction<TArg1, TArg2, TArg3, TArg4>(action, delay);
		}

		public static DelayAction<TArg1, TArg2, TArg3, TArg4> DelayInvoke<TArg1, TArg2, TArg3, TArg4>(this Action<TArg1, TArg2, TArg3, TArg4> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TimeSpan delay)
		{
			return DelayAction.StaticInvoke<TArg1, TArg2, TArg3, TArg4>(action, arg1, arg2, arg3, arg4, delay);
		}

		public static DelayAction<TArg1, TArg2, TArg3, TArg4> RevokeExchange<TArg1, TArg2, TArg3, TArg4>(this DelayAction<TArg1, TArg2, TArg3, TArg4> delayAction, DelayAction<TArg1, TArg2, TArg3, TArg4> newDelayAction = null)
		{
			delayAction?.Revoke();

			return newDelayAction;
		}
		public static DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5> AsDelayAction<TArg1, TArg2, TArg3, TArg4, TArg5>(this Action<TArg1, TArg2, TArg3, TArg4, TArg5> action)
		{
			return new DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5>(action);
		}

		public static DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5> AsDelayAction<TArg1, TArg2, TArg3, TArg4, TArg5>(this Action<TArg1, TArg2, TArg3, TArg4, TArg5> action, TimeSpan delay)
		{
			return new DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5>(action, delay);
		}

		public static DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5> DelayInvoke<TArg1, TArg2, TArg3, TArg4, TArg5>(this Action<TArg1, TArg2, TArg3, TArg4, TArg5> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TimeSpan delay)
		{
			return DelayAction.StaticInvoke<TArg1, TArg2, TArg3, TArg4, TArg5>(action, arg1, arg2, arg3, arg4, arg5, delay);
		}

		public static DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5> RevokeExchange<TArg1, TArg2, TArg3, TArg4, TArg5>(this DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5> delayAction, DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5> newDelayAction = null)
		{
			delayAction?.Revoke();

			return newDelayAction;
		}
		public static DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6> AsDelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6>(this Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6> action)
		{
			return new DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6>(action);
		}

		public static DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6> AsDelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6>(this Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6> action, TimeSpan delay)
		{
			return new DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6>(action, delay);
		}

		public static DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6> DelayInvoke<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6>(this Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TimeSpan delay)
		{
			return DelayAction.StaticInvoke<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6>(action, arg1, arg2, arg3, arg4, arg5, arg6, delay);
		}

		public static DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6> RevokeExchange<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6>(this DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6> delayAction, DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6> newDelayAction = null)
		{
			delayAction?.Revoke();

			return newDelayAction;
		}
		public static DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7> AsDelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7>(this Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7> action)
		{
			return new DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7>(action);
		}

		public static DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7> AsDelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7>(this Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7> action, TimeSpan delay)
		{
			return new DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7>(action, delay);
		}

		public static DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7> DelayInvoke<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7>(this Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TimeSpan delay)
		{
			return DelayAction.StaticInvoke<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7>(action, arg1, arg2, arg3, arg4, arg5, arg6, arg7, delay);
		}

		public static DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7> RevokeExchange<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7>(this DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7> delayAction, DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7> newDelayAction = null)
		{
			delayAction?.Revoke();

			return newDelayAction;
		}
		public static DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8> AsDelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8>(this Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8> action)
		{
			return new DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8>(action);
		}

		public static DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8> AsDelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8>(this Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8> action, TimeSpan delay)
		{
			return new DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8>(action, delay);
		}

		public static DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8> DelayInvoke<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8>(this Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TimeSpan delay)
		{
			return DelayAction.StaticInvoke<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8>(action, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, delay);
		}

		public static DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8> RevokeExchange<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8>(this DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8> delayAction, DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8> newDelayAction = null)
		{
			delayAction?.Revoke();

			return newDelayAction;
		}
		public static DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9> AsDelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9>(this Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9> action)
		{
			return new DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9>(action);
		}

		public static DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9> AsDelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9>(this Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9> action, TimeSpan delay)
		{
			return new DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9>(action, delay);
		}

		public static DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9> DelayInvoke<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9>(this Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9, TimeSpan delay)
		{
			return DelayAction.StaticInvoke<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9>(action, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, delay);
		}

		public static DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9> RevokeExchange<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9>(this DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9> delayAction, DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9> newDelayAction = null)
		{
			delayAction?.Revoke();

			return newDelayAction;
		}
		public static DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10> AsDelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10>(this Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10> action)
		{
			return new DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10>(action);
		}

		public static DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10> AsDelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10>(this Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10> action, TimeSpan delay)
		{
			return new DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10>(action, delay);
		}

		public static DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10> DelayInvoke<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10>(this Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9, TArg10 arg10, TimeSpan delay)
		{
			return DelayAction.StaticInvoke<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10>(action, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, delay);
		}

		public static DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10> RevokeExchange<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10>(this DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10> delayAction, DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10> newDelayAction = null)
		{
			delayAction?.Revoke();

			return newDelayAction;
		}
		public static DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11> AsDelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11>(this Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11> action)
		{
			return new DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11>(action);
		}

		public static DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11> AsDelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11>(this Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11> action, TimeSpan delay)
		{
			return new DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11>(action, delay);
		}

		public static DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11> DelayInvoke<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11>(this Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9, TArg10 arg10, TArg11 arg11, TimeSpan delay)
		{
			return DelayAction.StaticInvoke<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11>(action, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, delay);
		}

		public static DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11> RevokeExchange<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11>(this DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11> delayAction, DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11> newDelayAction = null)
		{
			delayAction?.Revoke();

			return newDelayAction;
		}
		public static DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12> AsDelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12>(this Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12> action)
		{
			return new DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12>(action);
		}

		public static DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12> AsDelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12>(this Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12> action, TimeSpan delay)
		{
			return new DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12>(action, delay);
		}

		public static DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12> DelayInvoke<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12>(this Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9, TArg10 arg10, TArg11 arg11, TArg12 arg12, TimeSpan delay)
		{
			return DelayAction.StaticInvoke<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12>(action, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, delay);
		}

		public static DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12> RevokeExchange<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12>(this DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12> delayAction, DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12> newDelayAction = null)
		{
			delayAction?.Revoke();

			return newDelayAction;
		}
		public static DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13> AsDelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13>(this Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13> action)
		{
			return new DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13>(action);
		}

		public static DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13> AsDelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13>(this Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13> action, TimeSpan delay)
		{
			return new DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13>(action, delay);
		}

		public static DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13> DelayInvoke<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13>(this Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9, TArg10 arg10, TArg11 arg11, TArg12 arg12, TArg13 arg13, TimeSpan delay)
		{
			return DelayAction.StaticInvoke<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13>(action, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, delay);
		}

		public static DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13> RevokeExchange<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13>(this DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13> delayAction, DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13> newDelayAction = null)
		{
			delayAction?.Revoke();

			return newDelayAction;
		}
		public static DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14> AsDelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14>(this Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14> action)
		{
			return new DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14>(action);
		}

		public static DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14> AsDelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14>(this Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14> action, TimeSpan delay)
		{
			return new DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14>(action, delay);
		}

		public static DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14> DelayInvoke<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14>(this Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9, TArg10 arg10, TArg11 arg11, TArg12 arg12, TArg13 arg13, TArg14 arg14, TimeSpan delay)
		{
			return DelayAction.StaticInvoke<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14>(action, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, delay);
		}

		public static DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14> RevokeExchange<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14>(this DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14> delayAction, DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14> newDelayAction = null)
		{
			delayAction?.Revoke();

			return newDelayAction;
		}
		public static DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15> AsDelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15>(this Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15> action)
		{
			return new DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15>(action);
		}

		public static DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15> AsDelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15>(this Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15> action, TimeSpan delay)
		{
			return new DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15>(action, delay);
		}

		public static DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15> DelayInvoke<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15>(this Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9, TArg10 arg10, TArg11 arg11, TArg12 arg12, TArg13 arg13, TArg14 arg14, TArg15 arg15, TimeSpan delay)
		{
			return DelayAction.StaticInvoke<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15>(action, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, delay);
		}

		public static DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15> RevokeExchange<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15>(this DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15> delayAction, DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15> newDelayAction = null)
		{
			delayAction?.Revoke();

			return newDelayAction;
		}
		public static DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16> AsDelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16>(this Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16> action)
		{
			return new DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16>(action);
		}

		public static DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16> AsDelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16>(this Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16> action, TimeSpan delay)
		{
			return new DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16>(action, delay);
		}

		public static DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16> DelayInvoke<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16>(this Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9, TArg10 arg10, TArg11 arg11, TArg12 arg12, TArg13 arg13, TArg14 arg14, TArg15 arg15, TArg16 arg16, TimeSpan delay)
		{
			return DelayAction.StaticInvoke<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16>(action, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, delay);
		}

		public static DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16> RevokeExchange<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16>(this DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16> delayAction, DelayAction<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16> newDelayAction = null)
		{
			delayAction?.Revoke();

			return newDelayAction;
		}
	}
}