<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

// <copyright file="Automata.Builder.Quantifier.cs" author="Dmitry Kravchenin" email="d.kravchenin@zaaml.com">
//   Copyright (c) Zaaml. All rights reserved.
// </copyright>

// *************************************************************
//
// AutoGenerated
//
// *************************************************************

// ReSharper disable All

<#
var args = new List<string>{ "PrimitiveMatchEntry match", "TOperand operand", "FiniteState state", "params Entry[] entries" };
var pars = new List<string>{ "match", "operand", "state", "Inline(entries)" };
#>

namespace Zaaml.Text
{
	internal abstract partial class Automata<TInstruction, TOperand>
	{
<#
		for (var a = 0; a < args.Count; a++)
		{
#>
		protected QuantifierEntry ZeroOrOne(<#= args[a] #>)
		{
			return new QuantifierEntry(<#= pars[a] #>, QuantifierKind.ZeroOrOne, QuantifierMode.Greedy);
		}

		protected QuantifierEntry ZeroOrMore(<#= args[a] #>)
		{
			return new QuantifierEntry(<#= pars[a] #>, QuantifierKind.ZeroOrMore, QuantifierMode.Greedy);
		}

		protected QuantifierEntry OneOrMore(<#= args[a] #>)
		{
			return new QuantifierEntry(<#= pars[a] #>, QuantifierKind.OneOrMore, QuantifierMode.Greedy);
		}

		protected QuantifierEntry Exact(int count, <#= args[a] #>)
		{
			return new QuantifierEntry(<#= pars[a] #>, QuantifierHelper.Exact(count), QuantifierMode.Greedy);
		}

		protected QuantifierEntry Between(int from, int to, <#= args[a] #>)
		{
			return new QuantifierEntry(<#= pars[a] #>, QuantifierHelper.Between(from, to), QuantifierMode.Greedy);
		}

		protected QuantifierEntry AtLeast(int count, <#= args[a] #>)
		{
			return new QuantifierEntry(<#= pars[a] #>, QuantifierHelper.AtLeast(count), QuantifierMode.Greedy);
		}

<#
		}
#>
	}
}